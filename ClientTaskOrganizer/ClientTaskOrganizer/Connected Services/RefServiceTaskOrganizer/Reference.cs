//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientTaskOrganizer.RefServiceTaskOrganizer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Task", Namespace="http://schemas.datacontract.org/2004/07/WCF_TaskOrganizer")]
    [System.SerializableAttribute()]
    public partial class Task : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MonthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YearField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Day {
            get {
                return this.DayField;
            }
            set {
                if ((this.DayField.Equals(value) != true)) {
                    this.DayField = value;
                    this.RaisePropertyChanged("Day");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Month {
            get {
                return this.MonthField;
            }
            set {
                if ((this.MonthField.Equals(value) != true)) {
                    this.MonthField = value;
                    this.RaisePropertyChanged("Month");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Year {
            get {
                return this.YearField;
            }
            set {
                if ((this.YearField.Equals(value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RefServiceTaskOrganizer.ITaskOrganizer")]
    public interface ITaskOrganizer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskOrganizer/SelectAllFromDb", ReplyAction="http://tempuri.org/ITaskOrganizer/SelectAllFromDbResponse")]
        ClientTaskOrganizer.RefServiceTaskOrganizer.Task[] SelectAllFromDb(string nameDataBases, string nameTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskOrganizer/SelectAllFromDb", ReplyAction="http://tempuri.org/ITaskOrganizer/SelectAllFromDbResponse")]
        System.Threading.Tasks.Task<ClientTaskOrganizer.RefServiceTaskOrganizer.Task[]> SelectAllFromDbAsync(string nameDataBases, string nameTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskOrganizer/ConnectToDb", ReplyAction="http://tempuri.org/ITaskOrganizer/ConnectToDbResponse")]
        bool ConnectToDb(string nameDataBases, string nameTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskOrganizer/ConnectToDb", ReplyAction="http://tempuri.org/ITaskOrganizer/ConnectToDbResponse")]
        System.Threading.Tasks.Task<bool> ConnectToDbAsync(string nameDataBases, string nameTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskOrganizer/DisconnectFromDb", ReplyAction="http://tempuri.org/ITaskOrganizer/DisconnectFromDbResponse")]
        void DisconnectFromDb();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskOrganizer/DisconnectFromDb", ReplyAction="http://tempuri.org/ITaskOrganizer/DisconnectFromDbResponse")]
        System.Threading.Tasks.Task DisconnectFromDbAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskOrganizer/DeleteRowInDb", ReplyAction="http://tempuri.org/ITaskOrganizer/DeleteRowInDbResponse")]
        void DeleteRowInDb(int Id, string nameDataBases, string nameTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskOrganizer/DeleteRowInDb", ReplyAction="http://tempuri.org/ITaskOrganizer/DeleteRowInDbResponse")]
        System.Threading.Tasks.Task DeleteRowInDbAsync(int Id, string nameDataBases, string nameTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskOrganizer/AddRowsToDb", ReplyAction="http://tempuri.org/ITaskOrganizer/AddRowsToDbResponse")]
        void AddRowsToDb(string command, string nameDataBases, string nameTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskOrganizer/AddRowsToDb", ReplyAction="http://tempuri.org/ITaskOrganizer/AddRowsToDbResponse")]
        System.Threading.Tasks.Task AddRowsToDbAsync(string command, string nameDataBases, string nameTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskOrganizer/SaveChangesToDb", ReplyAction="http://tempuri.org/ITaskOrganizer/SaveChangesToDbResponse")]
        void SaveChangesToDb(string command, string nameDataBases, string nameTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskOrganizer/SaveChangesToDb", ReplyAction="http://tempuri.org/ITaskOrganizer/SaveChangesToDbResponse")]
        System.Threading.Tasks.Task SaveChangesToDbAsync(string command, string nameDataBases, string nameTable);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskOrganizerChannel : ClientTaskOrganizer.RefServiceTaskOrganizer.ITaskOrganizer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskOrganizerClient : System.ServiceModel.ClientBase<ClientTaskOrganizer.RefServiceTaskOrganizer.ITaskOrganizer>, ClientTaskOrganizer.RefServiceTaskOrganizer.ITaskOrganizer {
        
        public TaskOrganizerClient() {
        }
        
        public TaskOrganizerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskOrganizerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskOrganizerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskOrganizerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClientTaskOrganizer.RefServiceTaskOrganizer.Task[] SelectAllFromDb(string nameDataBases, string nameTable) {
            return base.Channel.SelectAllFromDb(nameDataBases, nameTable);
        }
        
        public System.Threading.Tasks.Task<ClientTaskOrganizer.RefServiceTaskOrganizer.Task[]> SelectAllFromDbAsync(string nameDataBases, string nameTable) {
            return base.Channel.SelectAllFromDbAsync(nameDataBases, nameTable);
        }
        
        public bool ConnectToDb(string nameDataBases, string nameTable) {
            return base.Channel.ConnectToDb(nameDataBases, nameTable);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectToDbAsync(string nameDataBases, string nameTable) {
            return base.Channel.ConnectToDbAsync(nameDataBases, nameTable);
        }
        
        public void DisconnectFromDb() {
            base.Channel.DisconnectFromDb();
        }
        
        public System.Threading.Tasks.Task DisconnectFromDbAsync() {
            return base.Channel.DisconnectFromDbAsync();
        }
        
        public void DeleteRowInDb(int Id, string nameDataBases, string nameTable) {
            base.Channel.DeleteRowInDb(Id, nameDataBases, nameTable);
        }
        
        public System.Threading.Tasks.Task DeleteRowInDbAsync(int Id, string nameDataBases, string nameTable) {
            return base.Channel.DeleteRowInDbAsync(Id, nameDataBases, nameTable);
        }
        
        public void AddRowsToDb(string command, string nameDataBases, string nameTable) {
            base.Channel.AddRowsToDb(command, nameDataBases, nameTable);
        }
        
        public System.Threading.Tasks.Task AddRowsToDbAsync(string command, string nameDataBases, string nameTable) {
            return base.Channel.AddRowsToDbAsync(command, nameDataBases, nameTable);
        }
        
        public void SaveChangesToDb(string command, string nameDataBases, string nameTable) {
            base.Channel.SaveChangesToDb(command, nameDataBases, nameTable);
        }
        
        public System.Threading.Tasks.Task SaveChangesToDbAsync(string command, string nameDataBases, string nameTable) {
            return base.Channel.SaveChangesToDbAsync(command, nameDataBases, nameTable);
        }
    }
}
